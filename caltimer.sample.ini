# Example ini file for scheduler.py
# Defines some default values and the available switches
# The ini file needs to be saved under /etc/caltimer/

[DEFAULT]
# default software for RF transmit
# rf_code = rf433, rpi-rf
# Note: Recommend to use the rf433 with the RPi 1 models 
rf_code     : rf433
# Serial port of the nanocul
ser_port : /dev/ttyUSB.Nano

# Define default values for the RC codesend (Comag switches)
protocol    : 1
pulselength : 350

# available types = rf, comag, zap, kopp, gpio, pulse, dummy
type        : rf
zap_base    : FFF00
zap_pulse   : 187

# Kopp transmit duration in ms
kopp_time : 100

# maximum GPIO pulse length
max_pulse   : 10

# path to the RF433 binary
rf433       : /opt/433Utils/RPi_utils/codesend
# GPIO pin of RF transmitter
gpio  : 17

[LOGGING]
# set logging level
# CRITICAL > ERROR > WARNING INFO > DEBUG > NOTSET
loglevel     : INFO
# Logfile, if undefined it will be streamed to stderr
#logfile     : /log/scheduler.log

[CALENDAR]
# Calendar and timzone settings
caldav      : http://user:password@Nextcloud.address/remote.php/dav/
calname     : CalendarName
latitude    : 53.3845
longitude   : 9.9805
# the parameter localOffset is not used anymore
localOffset : 2
# Time interval per scheduler in minutes
interval    : 15

# Definition of the available RC switch sockets
# Each entry needs 4 key values:
#   oncode, offcode, protocol and pulselength
# The command format used to send RC codes is:
# codesend decimalcode [protocol] [pulselength]

[ZAP 1]
# using generic type "rf"
oncode      : 349491
offcode     : 349500
protocol    : 1
pulselength : 186

[ZAP 2]
# using generic type "zap"
# The ZAP channel is defined in the teansmitter by
# some solder bridges 1-5 at the HS22260A chip
# solder = 0, no solder = F
#       _,_,_,_,_,_,_,_,
#      |   HS2260A-R4   |
#      |o _ _ _ _ _ _ _ |
#        | | | | | ' ' '
# solder x x
#        |_|_|_|_|__
#        1 2 3 4 5  `GND
#
type        : zap
channel     : 00FFF
# base for key-code is # already defined in the
# DEFAULT section but can be overwrittern if needed
zap_base    : FFF00
# key is the receiver number 1-5
key         : 2

[Comag generic]
# Comag using the default switch type 'rf'
oncode      : 4543553
offcode     : 4543556
protocol    : 1
pulselength : 350

[Comag 5]
type        : comag
# System code 5 digits
system      : 01000
# Receiver code A-E
# The receiver support any binary address, 
# but the hand-held transmitter only single
# "1" (A-E) and rest must be "0"
# receiver "B" would be 01000
receiver    : 00101

########################################################################
# Definition of Kopp transmitters
# Code received by nanocul:
# kr07C2AD1A30CC0F0328
# ||  ||||  ||    ++-------- Transmitter Code 2
# ||  ||||  ++-------------- Keycode
# ||  ++++------------------ Transmitter Code 1
# ++------------------------ kr wird von der culfw bei Empfang einer Kopp Botschaft als 

[Kopp 3]
type       : kopp
transmit_1 : 3109
transmit_2 : 03
key_off    : 80
# the key_on code is calculated as key_off + 0x10

[Kopp 4]
type       : kopp
transmit_1 : 3109
transmit_2 : 03
key_off    : A0
key_on     : B0


[Dummy 1]
# dummy switch for testing the scheduler
type        : dummy

[Pi 15]
# Use Raspberry Pi GPIO 15 as a switch output
# The pin ID is based on teh BCM numbering
type        : gpio
pin         : 15

[Pulse 18]
# Use Raspberry Pi GPIO 18 as a pulsed switch output
# The pulse length for the on/off event is defined in seconds (as float)
type        : pulse
pin         : 18
on          : 0.5
off         : 2
